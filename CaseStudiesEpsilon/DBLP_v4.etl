
pre {
	var conferences : Set(DBLP2!Conference);
}

operation DBLP!InProceedings booktitle() : String {
  return self.bootitle;
}

operation DBLP!InProceedings year() : Integer {
  return self.year;
}

operation DBLP!Author nowPublishingIn() : Sequence(DBLP!InProceedings) {
  return self.records->select(r | r.isTypeOf(DBLP!InProceedings))->select(ip | ip.booktitle().indexOf('ICMT')<0 and ip.year()>2008)->asSequence();
}

operation DBLP!Author active() : Boolean {
  return self.records->select(r | r.isTypeOf(DBLP!InProceedings))->select(ip | ip.booktitle().indexOf('ICMT')>=0 and ip.year()>2008)->size()>0;
}
		
rule Author
	transform a : DBLP!Author
	to out : DBLP2!Author {
	
	guard : (a.records->select(r | r.isTypeOf(DBLP!InProceedings))->exists(ip | ip.booktitle().indexOf('ICMT')>=0))
		out.name := a.name;				
		out.active := a.active();
		
		for (conf in a.nowPublishingIn()) {
			if (not conferences->exists(c | c.name = conf.booktitle())) {
				conferences->add(conf.equivalent());
			}
			for (c2 in conferences->select(c | c.name = conf.booktitle())){
				out.publishesInC->add(c2);
			}		
		}
}

@lazy
rule Conference
	transform s : DBLP!InProceedings
	to c : DBLP2!Conference {
	 	c.name := s.booktitle();	 
}
		 		

		
